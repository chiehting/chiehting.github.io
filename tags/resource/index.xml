<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>resource on Chiehting</title><link>https://chiehting.com/tags/resource/</link><description>Recent content in resource on Chiehting</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Thu, 10 Aug 2023 17:51:21 +0800</lastBuildDate><atom:link href="https://chiehting.com/tags/resource/index.xml" rel="self" type="application/rss+xml"/><item><title>Adelson-Velsky and Landis tree</title><link>https://chiehting.com/posts/algorithm-adelson-velsky-and-landis-tree/</link><pubDate>Thu, 10 Aug 2023 17:51:21 +0800</pubDate><guid>https://chiehting.com/posts/algorithm-adelson-velsky-and-landis-tree/</guid><description>
&lt;p>這個來源探討了 AVL 樹如何解決二元搜尋樹可能退化為鏈表的問題。元搜尋樹在退化為鏈表後，其操作的時間複雜度會從 O(log n) 惡化為 O(n)，導致效率大幅下降。為了解決這個問題，AVL 樹透過「右旋」、「左旋」、「先右旋後左旋」和「先左旋後右旋」這四種旋轉操作，確保樹節點保持平衡，維持 AVL 樹的操作效率維持在 O(log n) 的級別。&lt;/p>
&lt;h3 id="summary">Summary&lt;/h3>
&lt;p>這個網站有圖形化說明 &lt;a href="https://visualgo.net/zh/bst?slide=1">二元樹操作&lt;/a> 的流程.&lt;/p>
&lt;p>樹為一種資料結構, 而 &lt;em>二元樹(Binary Tree)&lt;/em> 為樹結構的一種, &lt;em>二元搜尋樹(Binary Search Tree)&lt;/em> 為二元樹的應用之一.&lt;/p>
&lt;p>二元搜尋樹在做了多次的新增刪除操作後, 容易有二元樹退化的現象, 造成效率變差.
當二元搜尋樹退化成鍊表, 就會失去搜尋效率, 由 O(log n) 變為 O(n).
而 AVL 樹則以旋轉的方式保持二元樹平衡, 讓操作保持在 O(log n) 的級別裡.&lt;/p>
&lt;p>AVL 樹必須滿足 &lt;em>二元樹&lt;/em> 跟 &lt;em>二元搜尋樹&lt;/em> 的條件, 可以讓數自動的保持平衡, 再不刻意維護樹的情況下, 這是一種很好的方式.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>樹結構（Tree Structure）：&lt;/p>
&lt;ul>
&lt;li>樹結構是一種層次性的資料結構, 由節點（Node）和邊（Edge）組成.&lt;/li>
&lt;li>每個節點可以有零個或多個子節點, 其中一個節點稱為根節點（Root Node）.&lt;/li>
&lt;li>節點之間的關係是非線性的, 可以有多個子節點.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>二元樹（Binary Tree）：&lt;/p>
&lt;ul>
&lt;li>二元樹是一種特殊的樹結構, 每個節點最多只能有兩個子節點, 分別稱為左子節點和右子節點.&lt;/li>
&lt;li>二元樹有許多不同的變體, 如完美二元樹(Perfect Binary Tree)、完全二元樹等(Complete Binary Tree)、完滿二元樹(Full Binary Tree)、平衡二元樹(Balanced Binary Tree).&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>二元樹搜尋（Binary Search Tree）是一種特殊的二元樹，其具有以下特性：&lt;/p>
&lt;ul>
&lt;li>左子樹中的所有節點的值小於父節點的值.&lt;/li>
&lt;li>右子樹中的所有節點的值大於父節點的值.&lt;/li>
&lt;li>左右子樹本身也是二元樹搜尋.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="note">Note&lt;/h3>
&lt;p>原文 :: &lt;a href="https://www.hello-algo.com/chapter_tree/avl_tree/">AVL 樹&lt;/a>&lt;/p>
&lt;p>&lt;strong>&lt;span style="background-color: #ffffcc; color: red">二叉搜索樹可能退化為鏈表。這種情況下，所有操作的時間復雜度將從 O(log n) 惡化為 O(n)。&lt;/span>&lt;/strong>&lt;/p>
&lt;p>&lt;strong>G. M. Adelson-Velsky 和 E. M. Landis 在其 1962 年發表的論文 &amp;quot;An algorithm for the organization of information&amp;quot; 中提出了「AVL 樹」。論文中詳細描述了一系列操作，確保在持續添加和刪除節點後，AVL 樹不會退化，從而使得各種操作的時間復雜度保持在 O(log n)級別。&lt;span style="background-color: #ffffcc; color: red">換句話說，在需要頻繁進行增刪查改操作的場景中，AVL 樹能始終保持高效的數據操作性能，具有很好的應用價值。&lt;/span>&lt;/strong>&lt;/p>
&lt;h4 id="avl-樹常見術語">AVL 樹常見術語&lt;/h4>
&lt;p>節點高度&lt;/p>
&lt;p>「節點高度」是指從該節點到最遠葉節點的距離，即所經過的「邊」的數量。需要特別注意的是，葉節點的高度為 0 ，而空節點的高度為 -1 。我們將創建兩個工具函數，分別用於獲取和更新節點的高度。&lt;/p>
&lt;p>節點平衡因子&lt;/p>
&lt;p>節點的「平衡因子 Balance Factor」定義為節點左子樹的高度減去右子樹的高度，同時規定空節點的平衡因子為 0 。我們同樣將獲取節點平衡因子的功能封裝成函數，方便後續使用。&lt;/p>
&lt;h4 id="avl-樹旋轉">AVL 樹旋轉&lt;/h4>
&lt;p>AVL 樹的特點在於「旋轉 Rotation」操作，它能夠在不影響二叉樹的中序遍歷序列的前提下，使失衡節點重新恢復平衡。換句話說，旋轉操作既能保持樹的「二叉搜索樹」屬性，也能使樹重新變為「平衡二叉樹」。&lt;/p>
&lt;p>&lt;strong>我們將平衡因子絕對值 &amp;gt; 1 的節點稱為「失衡節點」。根據節點失衡情況的不同，旋轉操作分為四種：右旋、左旋、先右旋後左旋、先左旋後右旋。&lt;/strong> 下面我們將詳細介紹這些旋轉操作。&lt;/p>
&lt;p>可以觀察到右旋和左旋操作在邏輯上是鏡像對稱的，它們分別解決的兩種失衡情況也是對稱的。基於對稱性，我們可以輕松地從右旋的代碼推導出左旋的代碼。具體地，只需將「右旋」代碼中的把所有的 &lt;code>left&lt;/code> 替換為 &lt;code>right&lt;/code> ，將所有的 &lt;code>right&lt;/code> 替換為 &lt;code>left&lt;/code> ，即可得到「左旋」代碼。&lt;/p>
&lt;p>代碼中，我們通過判斷失衡節點的平衡因子以及較高一側子節點的平衡因子的正負號，來確定失衡節點屬於上圖中的哪種情況。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>失衡節點的平衡因子&lt;/th>
&lt;th>子節點的平衡因子&lt;/th>
&lt;th>應采用的旋轉方法&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;gt;1 （即左偏樹）&lt;/td>
&lt;td>≧0&lt;/td>
&lt;td>右旋&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt;1 （即左偏樹）&lt;/td>
&lt;td>&amp;lt;0&lt;/td>
&lt;td>先左旋後右旋&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt;−1 （即右偏樹）&lt;/td>
&lt;td>≦0&lt;/td>
&lt;td>左旋&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt;−1 （即右偏樹）&lt;/td>
&lt;td>&amp;gt;0&lt;/td>
&lt;td>先右旋後左旋&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>The para mothed</title><link>https://chiehting.com/posts/%E5%A6%82%E4%BD%95%E5%88%86%E9%A1%9E%E7%AD%86%E8%A8%98%E4%B8%80%E5%A5%97%E7%B0%A1%E5%96%AE%E5%8F%88%E9%80%9A%E7%94%A8%E7%9A%84%E5%88%86%E9%A1%9E%E6%9E%B6%E6%A7%8B-para/</link><pubDate>Fri, 23 Jun 2023 02:28:08 +0800</pubDate><guid>https://chiehting.com/posts/%E5%A6%82%E4%BD%95%E5%88%86%E9%A1%9E%E7%AD%86%E8%A8%98%E4%B8%80%E5%A5%97%E7%B0%A1%E5%96%AE%E5%8F%88%E9%80%9A%E7%94%A8%E7%9A%84%E5%88%86%E9%A1%9E%E6%9E%B6%E6%A7%8B-para/</guid><description>
&lt;p>文章中 &lt;a href="https://medium.com/pm%E7%9A%84%E7%94%9F%E7%94%A2%E5%8A%9B%E5%B7%A5%E5%85%B7%E7%AE%B1/%E5%A6%82%E4%BD%95%E5%88%86%E9%A1%9E%E7%AD%86%E8%A8%98-e25c4cc39dba">如何分類筆記？一套簡單又通用的分類架構-PARA&lt;/a> 說講述了筆記分類碰到的問題，以及如何應用 PARA 的分類架構來解決問題。&lt;/p>
&lt;h3 id="para--架構">PARA 架構&lt;/h3>
&lt;p>PARA 是由四個單字組成的，如下：&lt;/p>
&lt;ul>
&lt;li>Projects&lt;/li>
&lt;li>Areas of responsibility (下方講解均簡稱 Area)&lt;/li>
&lt;li>Resources&lt;/li>
&lt;li>Archives&lt;/li>
&lt;/ul>
&lt;p>這套架構是由生產力專家 — Tiago Forte 所提出，有以下 5 點特色讓作者覺得很棒：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>泛用性&lt;/strong>：適用在任何型態的資源，你不但可以用在筆記軟體、也可以用在雲端硬碟、個人電腦的檔案分類。&lt;/li>
&lt;li>&lt;strong>行動性&lt;/strong>：筆記不再只是死板的資訊，而是可以讓你知道下一步的行動是什麼。&lt;/li>
&lt;li>&lt;strong>產出導向&lt;/strong>：分類的目標是提升你的產出能力。&lt;/li>
&lt;li>&lt;strong>可縮放性&lt;/strong>：可以讓你依據需求調整檢視筆記內容的顆粒度，可以快速總覽也可以深入細節。&lt;/li>
&lt;li>&lt;strong>機動性&lt;/strong>：可直接從既有的筆記開始使用，不需要大幅顛覆整個既有的筆記系統。&lt;/li>
&lt;/ul>
&lt;h3 id="筆記的可行動性-actionable">筆記的可行動性 (actionable)&lt;/h3>
&lt;p>我們寫下的筆記，只有少數的筆記我們會花時間更新與維護 ; 而大多數都不會再被看第二遍，更不用說在上面記錄待辦清單、思考過程。&lt;/p>
&lt;p>然而人的專注力是有限制的。在現實生活中，我一段時間 ( 2–3 個月) 只能專注在 1–3 個子專案，其他的子專案筆記可能 1 個月都不會開啟一次。&lt;/p>
&lt;p>上述的結果會讓筆記的維護性變低；資料內容變舊，不容易讓知識累積。&lt;/p>
&lt;h3 id="作者心得">作者心得&lt;/h3>
&lt;p>這篇文章快速地介紹了 PARA 這套筆記架構。就算已經有自己的分類方式，但想要讓自己的筆記更有行動力，也可以採用 PARA 的架構做分類。&lt;/p>
&lt;p>在文章的一開頭提到了 PARA 的 5 個特點：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>泛用性&lt;/strong>：適用在任何型態的資源，你不但可以用在筆記軟體、也可以用在雲端硬碟、個人電腦的檔案分類。&lt;/li>
&lt;li>&lt;strong>行動性&lt;/strong>：筆記不再只是死板的資訊，而是可以讓你知道下一步的行動是什麼。&lt;/li>
&lt;li>&lt;strong>產出導向&lt;/strong>：分類的目標是提升你的產出能力。&lt;/li>
&lt;li>&lt;strong>可縮放性&lt;/strong>：可以讓你依據需求調整檢視筆記內容的顆粒度，可以快速總覽也可以深入細節。&lt;/li>
&lt;li>&lt;strong>可立即開始的&lt;/strong>：可直接從既有的筆記開始使用，不需要大幅顛覆整個既有的筆記系統。&lt;/li>
&lt;/ul></description></item></channel></rss>