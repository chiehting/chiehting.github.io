<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rfc on Chiehting</title><link>https://chiehting.com/tags/rfc/</link><description>Recent content in rfc on Chiehting</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Fri, 16 Feb 2024 11:28:57 +0800</lastBuildDate><atom:link href="https://chiehting.com/tags/rfc/index.xml" rel="self" type="application/rss+xml"/><item><title>rfc6265</title><link>https://chiehting.com/posts/internet-rfc-6265-server-requirements/</link><pubDate>Fri, 16 Feb 2024 11:28:57 +0800</pubDate><guid>https://chiehting.com/posts/internet-rfc-6265-server-requirements/</guid><description>
&lt;p>文章是在導讀 Set-Cookie header fields 規範以及重要屬性。&lt;/p>
&lt;h3 id="referances">Referances&lt;/h3>
&lt;p>&lt;a href="https://www.rfc-editor.org/rfc/rfc6265.html#section-4">HTTP State Management Mechanism&lt;/a>&lt;/p>
&lt;h3 id="summary">Summary&lt;/h3>
&lt;p>第四章節是在說明 Set-Cookie 的方式，其中關鍵字為 &lt;code>Set-Cookie&lt;/code>，將 Set-Cookie 加到 response header 內容中，其格式是使用 name-value-pair，並返回給 user agent。&lt;/p>
&lt;p>user agent 收到 Set-Cookie 後會保存其資料，如果該資料已經存在則會覆蓋。這邊也建議伺服器將資料內容做編碼，例如 base64。&lt;/p>
&lt;p>在 4.1.2 的章節中有幾個重要的屬性，條列如下：&lt;/p>
&lt;p>4.1.2.1. The Expires Attribute：定義 Cookies 的過期時間，過期後則不保留 cookie。&lt;/p>
&lt;p>4.1.2.2. The Max-Age Attribute：定義 Cookies 的保留日期，過期後則不保留 cookie。&lt;/p>
&lt;p>4.1.2.3. The Domain Attribute：定義 Cookies 的域名。&lt;/p>
&lt;blockquote>
&lt;p>For example, if the value of the Domain attribute is
&amp;quot;example.com&amp;quot;, the user agent will include the cookie in the Cookie
header when making HTTP requests to example.com, &lt;a href="https://www.example.com">www.example.com&lt;/a>, and
&lt;a href="https://www.corp.example.com">www.corp.example.com&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>4.1.2.4. The Path Attribute：定義 Cookies 的路徑。配置 Path Attribute 後，就只會在指定的路徑中做 Cookies 的交互。&lt;/p>
&lt;p>4.1.2.5. The Secure Attribute：限制 Cookies 只能在 &amp;quot;安全&amp;quot; 頻道中做傳輸。配置 Secure Attribute 後，就只能在 HTTPS 的請求中做 Cookies 的交互。&lt;/p>
&lt;p>4.1.2.6. The HttpOnly Attribute：限制 Cookies 的存取方式。配置 HttpOnly Attribute 後，就只能使用 http 請求做 Cookies 的存取，否則會被省略，例如無法使用 javascript 來存取 Cookies 的內容。&lt;/p>
&lt;h3 id="note">Note&lt;/h3>
&lt;p>原文 :: &lt;a href="https://www.rfc-editor.org/rfc/rfc6265.html#section-4">rfc6265&lt;/a>&lt;/p>
&lt;h4 id="4-server-requirements">4. Server Requirements&lt;/h4>
&lt;p>This section describes the syntax and semantics of a well-behaved
profile of the Cookie and Set-Cookie headers.&lt;/p>
&lt;p>4.1. Set-Cookie&lt;/p>
&lt;p>The Set-Cookie HTTP response header is used to send cookies from the
server to the user agent.&lt;/p>
&lt;p>4.1.1. Syntax&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red"> Informally, the Set-Cookie response header contains the header name
&amp;quot;Set-Cookie&amp;quot; followed by a &amp;quot;:&amp;quot; and a cookie.&lt;/span> Each cookie begins with
a name-value-pair, followed by zero or more attribute-value pairs.
Servers SHOULD NOT send Set-Cookie headers that fail to conform to
the following grammar:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">set-cookie-header = &amp;#34;Set-Cookie:&amp;#34; SP set-cookie-string
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">set-cookie-string = cookie-pair *( &amp;#34;;&amp;#34; SP cookie-av )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">cookie-pair = cookie-name &amp;#34;=&amp;#34; cookie-value
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">cookie-name = token
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">cookie-value = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">cookie-octet = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> ; US-ASCII characters excluding CTLs,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> ; whitespace DQUOTE, comma, semicolon,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> ; and backslash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">token = &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">token&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">defined&lt;/span> &lt;span class="na">in&lt;/span> &lt;span class="err">[&lt;/span>&lt;span class="na">RFC2616&lt;/span>&lt;span class="err">],&lt;/span> &lt;span class="na">Section&lt;/span> &lt;span class="na">2&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">2&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">cookie-av = expires-av / max-age-av / domain-av /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> path-av / secure-av / httponly-av /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> extension-av
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl">expires-av = &amp;#34;Expires=&amp;#34; sane-cookie-date
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">sane-cookie-date = &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">rfc1123-date&lt;/span>&lt;span class="err">,&lt;/span> &lt;span class="na">defined&lt;/span> &lt;span class="na">in&lt;/span> &lt;span class="err">[&lt;/span>&lt;span class="na">RFC2616&lt;/span>&lt;span class="err">],&lt;/span> &lt;span class="na">Section&lt;/span> &lt;span class="na">3&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">3&lt;/span>&lt;span class="err">.&lt;/span>&lt;span class="na">1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl">max-age-av = &amp;#34;Max-Age=&amp;#34; non-zero-digit *DIGIT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> ; In practice, both expires-av and max-age-av
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl"> ; are limited to dates representable by the
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl"> ; user agent.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl">non-zero-digit = %x31-39
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl"> ; digits 1 through 9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">23&lt;/span>&lt;span class="cl">domain-av = &amp;#34;Domain=&amp;#34; domain-value
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">24&lt;/span>&lt;span class="cl">domain-value = &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">subdomain&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">25&lt;/span>&lt;span class="cl"> ; defined in [RFC1034], Section 3.5, as
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">26&lt;/span>&lt;span class="cl"> ; enhanced by [RFC1123], Section 2.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">27&lt;/span>&lt;span class="cl">path-av = &amp;#34;Path=&amp;#34; path-value
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">28&lt;/span>&lt;span class="cl">path-value = &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">any&lt;/span> &lt;span class="na">CHAR&lt;/span> &lt;span class="na">except&lt;/span> &lt;span class="na">CTLs&lt;/span> &lt;span class="na">or&lt;/span> &lt;span class="err">&amp;#34;;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">29&lt;/span>&lt;span class="cl">secure-av = &amp;#34;Secure&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">30&lt;/span>&lt;span class="cl">httponly-av = &amp;#34;HttpOnly&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">31&lt;/span>&lt;span class="cl">extension-av = &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">any&lt;/span> &lt;span class="na">CHAR&lt;/span> &lt;span class="na">except&lt;/span> &lt;span class="na">CTLs&lt;/span> &lt;span class="na">or&lt;/span> &lt;span class="err">&amp;#34;;&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that some of the grammatical terms above reference documents
that use different grammatical notations than this document (which
uses ABNF from [RFC5234]).&lt;/p>
&lt;p>The semantics of the cookie-value are not defined by this document.&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red">To maximize compatibility with user agents, servers that wish to
store arbitrary data in a cookie-value SHOULD encode that data, for
example, using Base64 [RFC4648].&lt;/span>&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red">The portions of the set-cookie-string produced by the cookie-av term
are known as attributes. To maximize compatibility with user agents,
servers SHOULD NOT produce two attributes with the same name in the
same set-cookie-string. (See Section 5.3 for how user agents handle
this case.)&lt;/span>&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red">Servers SHOULD NOT include more than one Set-Cookie header field in
the same response with the same cookie-name. (See Section 5.2 for
how user agents handle this case.)&lt;/span>&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red">If a server sends multiple responses containing Set-Cookie headers
concurrently to the user agent (e.g., when communicating with the
user agent over multiple sockets), these responses create a &amp;quot;race
condition&amp;quot; that can lead to unpredictable behavior.&lt;/span>&lt;/p>
&lt;p>NOTE: Some existing user agents differ in their interpretation of
two-digit years. To avoid compatibility issues, servers SHOULD use
the rfc1123-date format, which requires a four-digit year.&lt;/p>
&lt;p>NOTE: Some user agents store and process dates in cookies as 32-bit
UNIX time_t values. Implementation bugs in the libraries supporting
time_t processing on some systems might cause such user agents to
process dates after the year 2038 incorrectly.&lt;/p>
&lt;p>4.1.2. Semantics (Non-Normative)&lt;/p>
&lt;p>This section describes simplified semantics of the Set-Cookie header.
These semantics are detailed enough to be useful for understanding
the most common uses of cookies by servers. The full semantics are
described in Section 5.&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red">When the user agent receives a Set-Cookie header, the user agent
stores the cookie together with its attributes. Subsequently, when
the user agent makes an HTTP request, the user agent includes the
applicable, non-expired cookies in the Cookie header.&lt;/span>&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red">If the user agent receives a new cookie with the same cookie-name,
domain-value, and path-value as a cookie that it has already stored,
the existing cookie is evicted and replaced with the new cookie.
Notice that servers can delete cookies by sending the user agent a
new cookie with an Expires attribute with a value in the past.&lt;/span>&lt;/p>
&lt;p>Unless the cookie's attributes indicate otherwise, the cookie is
returned only to the origin server (and not, for example, to any
subdomains), and it expires at the end of the current session (as
defined by the user agent). User agents ignore unrecognized cookie
attributes (but not the entire cookie).&lt;/p>
&lt;p>4.1.2.1. The Expires Attribute&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red">The Expires attribute indicates the maximum lifetime of the cookie,
represented as the date and time at which the cookie expires. The
user agent is not required to retain the cookie until the specified
date has passed. In fact, user agents often evict cookies due to
memory pressure or privacy concerns.&lt;/span>&lt;/p>
&lt;p>4.1.2.2. The Max-Age Attribute&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red"> The Max-Age attribute indicates the maximum lifetime of the cookie,
represented as the number of seconds until the cookie expires. The
user agent is not required to retain the cookie for the specified
duration. In fact, user agents often evict cookies due to memory
pressure or privacy concerns.&lt;/span>&lt;/p>
&lt;pre>&lt;code> NOTE: Some existing user agents do not support the Max-Age
attribute. User agents that do not support the Max-Age attribute
ignore the attribute.
&lt;/code>&lt;/pre>
&lt;p>If a cookie has both the Max-Age and the Expires attribute, the Max-
Age attribute has precedence and controls the expiration date of the
cookie. If a cookie has neither the Max-Age nor the Expires
attribute, the user agent will retain the cookie until &amp;quot;the current
session is over&amp;quot; (as defined by the user agent).&lt;/p>
&lt;p>4.1.2.3. The Domain Attribute&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red">The Domain attribute specifies those hosts to which the cookie will
be sent. For example, if the value of the Domain attribute is
&amp;quot;example.com&amp;quot;, the user agent will include the cookie in the Cookie
header when making HTTP requests to example.com, &lt;a href="https://www.example.com">www.example.com&lt;/a>, and
&lt;a href="https://www.corp.example.com">www.corp.example.com&lt;/a>.&lt;/span> (Note that a leading %x2E (&amp;quot;.&amp;quot;), if present,
is ignored even though that character is not permitted, but a
trailing %x2E (&amp;quot;.&amp;quot;), if present, will cause the user agent to ignore
the attribute.) If the server omits the Domain attribute, the user
agent will return the cookie only to the origin server.&lt;/p>
&lt;pre>&lt;code> WARNING: Some existing user agents treat an absent Domain
attribute as if the Domain attribute were present and contained
the current host name. For example, if example.com returns a Set-
Cookie header without a Domain attribute, these user agents will
erroneously send the cookie to www.example.com as well.
&lt;/code>&lt;/pre>
&lt;p>The user agent will reject cookies unless the Domain attribute
specifies a scope for the cookie that would include the origin
server. For example, the user agent will accept a cookie with a
Domain attribute of &amp;quot;example.com&amp;quot; or of &amp;quot;foo.example.com&amp;quot; from
foo.example.com, but the user agent will not accept a cookie with a
Domain attribute of &amp;quot;bar.example.com&amp;quot; or of &amp;quot;baz.foo.example.com&amp;quot;.&lt;/p>
&lt;p>NOTE: For security reasons, many user agents are configured to reject
Domain attributes that correspond to &amp;quot;public suffixes&amp;quot;. For example,
some user agents will reject Domain attributes of &amp;quot;com&amp;quot; or &amp;quot;co.uk&amp;quot;.
(See Section 5.3 for more information.)&lt;/p>
&lt;p>4.1.2.4. The Path Attribute&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red">The scope of each cookie is limited to a set of paths, controlled by
the Path attribute. If the server omits the Path attribute, the user
agent will use the &amp;quot;directory&amp;quot; of the request-uri's path component as
the default value. (See Section 5.1.4 for more details.)&lt;/span>&lt;/p>
&lt;p>The user agent will include the cookie in an HTTP request only if the
path portion of the request-uri matches (or is a subdirectory of) the
cookie's Path attribute, where the %x2F (&amp;quot;/&amp;quot;) character is
interpreted as a directory separator.&lt;/p>
&lt;p>Although seemingly useful for isolating cookies between different
paths within a given host, the Path attribute cannot be relied upon
for security (see Section 8).&lt;/p>
&lt;p>4.1.2.5. The Secure Attribute&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red">The Secure attribute limits the scope of the cookie to &amp;quot;secure&amp;quot;
channels (where &amp;quot;secure&amp;quot; is defined by the user agent). When a
cookie has the Secure attribute, the user agent will include the
cookie in an HTTP request only if the request is transmitted over a
secure channel (typically HTTP over Transport Layer Security (TLS)
[RFC2818]).&lt;/span>&lt;/p>
&lt;p>Although seemingly useful for protecting cookies from active network
attackers, the Secure attribute protects only the cookie's
confidentiality. An active network attacker can overwrite Secure
cookies from an insecure channel, disrupting their integrity (see
Section 8.6 for more details).&lt;/p>
&lt;p>4.1.2.6. The HttpOnly Attribute&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red">The HttpOnly attribute limits the scope of the cookie to HTTP
requests. In particular, the attribute instructs the user agent to
omit the cookie when providing access to cookies via &amp;quot;non-HTTP&amp;quot; APIs
(such as a web browser API that exposes cookies to scripts).&lt;/span>&lt;/p>
&lt;p>Note that the HttpOnly attribute is independent of the Secure
attribute: a cookie can have both the HttpOnly and the Secure
attribute.&lt;/p>
&lt;p>4.2. Cookie&lt;/p>
&lt;p>4.2.1. Syntax&lt;/p>
&lt;p>The user agent sends stored cookies to the origin server in the
Cookie header. If the server conforms to the requirements in
Section 4.1 (and the user agent conforms to the requirements in
Section 5), the user agent will send a Cookie header that conforms to
the following grammar:&lt;/p>
&lt;p>cookie-header = &amp;quot;Cookie:&amp;quot; OWS cookie-string OWS
cookie-string = cookie-pair *( &amp;quot;;&amp;quot; SP cookie-pair )&lt;/p>
&lt;p>4.2.2. Semantics&lt;/p>
&lt;p>Each cookie-pair represents a cookie stored by the user agent. The
cookie-pair contains the cookie-name and cookie-value the user agent
received in the Set-Cookie header.&lt;/p>
&lt;p>Notice that the cookie attributes are not returned. In particular,
the server cannot determine from the Cookie header alone when a
cookie will expire, for which hosts the cookie is valid, for which
paths the cookie is valid, or whether the cookie was set with the
Secure or HttpOnly attributes.&lt;/p>
&lt;p>The semantics of individual cookies in the Cookie header are not
defined by this document. Servers are expected to imbue these
cookies with application-specific semantics.&lt;/p>
&lt;p>Although cookies are serialized linearly in the Cookie header,
servers SHOULD NOT rely upon the serialization order. In particular,
if the Cookie header contains two cookies with the same name (e.g.,
that were set with different Path or Domain attributes), servers
SHOULD NOT rely upon the order in which these cookies appear in the
header.&lt;/p></description></item><item><title>rfc6265</title><link>https://chiehting.com/posts/internet-rfc-6265/</link><pubDate>Fri, 16 Feb 2024 11:28:57 +0800</pubDate><guid>https://chiehting.com/posts/internet-rfc-6265/</guid><description>
&lt;p>文章主要在研究 RFC 6265 - HTTP State Management Mechanism。文章是在定義 HTTP Cookie and Set-Cookie header fields 規範。&lt;/p>
&lt;h3 id="referances">Referances&lt;/h3>
&lt;p>&lt;a href="https://www.rfc-editor.org/rfc/rfc6265.txt">RFC 6265&lt;/a>&lt;/p>
&lt;h3 id="summary">Summary&lt;/h3>
&lt;p>RFC 6265 - HTTP State Management Mechanism 是在定義 HTTP Cookies and Set-Cookie header fields。Cookie 是 Server / Client 資料交互的方法之一，是 developers of cookie-
generating servers 和 developers of cookie-consuming user agents 需要關心的重要議題。&lt;/p>
&lt;p>第四章節在說明 Set-Cookie header fields 規範以及重要屬性 ([[internet-rfc-6265-server-requirements]])。&lt;/p>
&lt;h3 id="note">Note&lt;/h3>
&lt;p>原文 :: &lt;a href="https://www.rfc-editor.org/info/rfc6265">rfc6265&lt;/a>&lt;/p>
&lt;h4 id="abstract">Abstract&lt;/h4>
&lt;p>&lt;span style="background-color: #ffffcc; color: red">This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.&lt;/span> Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet. This document obsoletes RFC 2965. [STANDARDS-TRACK]&lt;/p>
&lt;p>Table of Contents&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">1. Introduction
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">2. Conventions
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> 2.1. Conformance Criteria
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> 2.2. Syntax Notation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> 2.3. Terminology
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">3. Overview
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> 3.1. Examples
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">4. Server Requirements
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> 4.1. Set-Cookie
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> 4.1.1. Syntax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> 4.1.2. Semantics (Non-Normative)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> 4.2. Cookie
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> 4.2.1. Syntax
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> 4.2.2. Semantics
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl">5. User Agent Requirements
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl"> 5.1. Subcomponent Algorithms
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl"> 5.1.1. Dates
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> 5.1.2. Canonicalized Host Names
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl"> 5.1.3. Domain Matching
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl"> 5.1.4. Paths and Path-Match
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl"> 5.2. The Set-Cookie Header
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl"> 5.2.1. The Expires Attribute
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">23&lt;/span>&lt;span class="cl"> 5.2.2. The Max-Age Attribute
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">24&lt;/span>&lt;span class="cl"> 5.2.3. The Domain Attribute
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">25&lt;/span>&lt;span class="cl"> 5.2.4. The Path Attribute
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">26&lt;/span>&lt;span class="cl"> 5.2.5. The Secure Attribute
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">27&lt;/span>&lt;span class="cl"> 5.2.6. The HttpOnly Attribute
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">28&lt;/span>&lt;span class="cl"> 5.3. Storage Model
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">29&lt;/span>&lt;span class="cl"> 5.4. The Cookie Header
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">30&lt;/span>&lt;span class="cl">6. Implementation Considerations
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">31&lt;/span>&lt;span class="cl"> 6.1. Limits
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">32&lt;/span>&lt;span class="cl"> 6.2. Application Programming Interfaces
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">33&lt;/span>&lt;span class="cl"> 6.3. IDNA Dependency and Migration
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">34&lt;/span>&lt;span class="cl">7. Privacy Considerations
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">35&lt;/span>&lt;span class="cl"> 7.1. Third-Party Cookies
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">36&lt;/span>&lt;span class="cl"> 7.2. User Controls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">37&lt;/span>&lt;span class="cl"> 7.3. Expiration Dates
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">38&lt;/span>&lt;span class="cl">8. Security Considerations
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">39&lt;/span>&lt;span class="cl"> 8.1. Overview
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">40&lt;/span>&lt;span class="cl"> 8.2. Ambient Authority
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">41&lt;/span>&lt;span class="cl"> 8.3. Clear Text
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">42&lt;/span>&lt;span class="cl"> 8.4. Session Identifiers
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">43&lt;/span>&lt;span class="cl"> 8.5. Weak Confidentiality
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">44&lt;/span>&lt;span class="cl"> 8.6. Weak Integrity
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">45&lt;/span>&lt;span class="cl"> 8.7. Reliance on DNS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">46&lt;/span>&lt;span class="cl">9. IANA Considerations
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">47&lt;/span>&lt;span class="cl"> 9.1. Cookie
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">48&lt;/span>&lt;span class="cl"> 9.2. Set-Cookie
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">49&lt;/span>&lt;span class="cl"> 9.3. Cookie2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">50&lt;/span>&lt;span class="cl"> 9.4. Set-Cookie2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">51&lt;/span>&lt;span class="cl">10. References
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">52&lt;/span>&lt;span class="cl"> 10.1. Normative References
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">53&lt;/span>&lt;span class="cl"> 10.2. Informative References
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">54&lt;/span>&lt;span class="cl">Appendix A. Acknowledgements
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="introduction">Introduction&lt;/h4>
&lt;p>This document defines the HTTP Cookie and Set-Cookie header fields.
&lt;span style="background-color: #ffffcc; color: red">Using the Set-Cookie header field, an HTTP server can pass name/value
pairs and associated metadata (called cookies) to a user agent. When
the user agent makes subsequent requests to the server, the user
agent uses the metadata and other information to determine whether to
return the name/value pairs in the Cookie header.&lt;/span>&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red">Although simple on their surface, cookies have a number of
complexities. For example, the server indicates a scope for each
cookie when sending it to the user agent. The scope indicates the
maximum amount of time in which the user agent should return the
cookie, the servers to which the user agent should return the cookie,
and the URI schemes for which the cookie is applicable.&lt;/span>&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red">For historical reasons, cookies contain a number of security and
privacy infelicities. For example, a server can indicate that a
given cookie is intended for &amp;quot;secure&amp;quot; connections, but the Secure
attribute does not provide integrity in the presence of an active
network attacker. Similarly, cookies for a given host are shared
across all the ports on that host, even though the usual &amp;quot;same-origin
policy&amp;quot; used by web browsers isolates content retrieved via different
ports.&lt;/span>&lt;/p>
&lt;p>&lt;span style="background-color: #ffffcc; color: red">There are two audiences for this specification: developers of cookie-
generating servers and developers of cookie-consuming user agents.&lt;/span>&lt;/p>
&lt;p>To maximize interoperability with user agents, servers SHOULD limit
themselves to the well-behaved profile defined in Section 4 when
generating cookies.&lt;/p>
&lt;p>User agents MUST implement the more liberal processing rules defined
in Section 5, in order to maximize interoperability with existing
servers that do not conform to the well-behaved profile defined in
Section 4.&lt;/p>
&lt;p>This document specifies the syntax and semantics of these headers as
they are actually used on the Internet. In particular, this document
does not create new syntax or semantics beyond those in use today.
The recommendations for cookie generation provided in Section 4
represent a preferred subset of current server behavior, and even the
more liberal cookie processing algorithm provided in Section 5 does
not recommend all of the syntactic and semantic variations in use
today. Where some existing software differs from the recommended
protocol in significant ways, the document contains a note explaining
the difference.&lt;/p></description></item></channel></rss>